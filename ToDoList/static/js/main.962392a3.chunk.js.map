{"version":3,"sources":["components/Input.jsx","components/ToDoItem.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","onKeyUp","this","props","keyUpHandler","className","type","placeholder","React","Component","ToDoItem","_this","onDoubleClick","handleDoubleClickToEdit","index","text","onClick","handleClickToRemove","ToDoList","state","list","arr","newValue","prompt","setState","splice","event","keyCode","target","value","newToDo","push","_this2","Input_Input","map","item","ToDoItem_ToDoItem","key","handleEditing","App","ToDoList_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,SACEC,QAASC,KAAKC,MAAMC,aACpBC,UAAU,eACVC,KAAK,OACLC,YAAa,yGAPcC,IAAMC,YCApBC,mLACV,IAAAC,EAAAT,KACP,OACEJ,EAAAC,EAAAC,cAAA,OACEY,cAAe,kBACbD,EAAKR,MAAMU,wBAAwBF,EAAKR,MAAMW,QAEhDT,UAAU,cAETH,KAAKC,MAAMY,KACZjB,EAAAC,EAAAC,cAAA,OACEgB,QAAS,kBAAML,EAAKR,MAAMc,oBAAoBN,EAAKR,MAAMW,QACzDT,UAAU,gBAFZ,aAV8BG,IAAMC,WCEvBS,6MACnBC,MAAQ,CACNC,KAAM,MAuBRP,wBAA0B,SAAAC,GAExB,IAAIO,EAAMV,EAAKQ,MAAMC,KACjBE,EAAWC,OAAO,6HAA0BF,EAAIP,KAAWO,EAAIP,GACnEO,EAAIP,GAASQ,EACbX,EAAKa,SAAS,CAAEJ,KAAMC,OAExBJ,oBAAsB,SAAAH,GAEpB,IAAIO,EAAMV,EAAKQ,MAAMC,KACrBC,EAAII,OAAOX,EAAO,GAClBH,EAAKa,SAAS,CAAEJ,KAAMC,OAGxBjB,aAAe,SAAAsB,GAEb,GAAsB,KAAlBA,EAAMC,SAAyC,KAAvBD,EAAME,OAAOC,MAAc,CACrD,IAAIC,EAAUJ,EAAME,OAAOC,MACvBR,EAAMV,EAAKQ,MAAMC,KACrBC,EAAIU,KAAKD,GACTJ,EAAME,OAAOC,MAAQ,GACrBlB,EAAKa,SAAS,CAAEJ,KAAMC,8EA1CjB,IAAAW,EAAA9B,KACHkB,EAAOlB,KAAKiB,MAAMC,KACtB,OACEtB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACiC,EAAD,CAAO7B,aAAcF,KAAKE,eACzBgB,EAAKc,IAAI,SAACC,EAAMrB,GACf,OACEhB,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKvB,EACLA,MAAOA,EACPC,KAAMoB,EACNlB,oBAAqBe,EAAKf,oBAC1BJ,wBAAyBmB,EAAKnB,wBAC9ByB,cAAeN,EAAKM,0BAlBI9B,IAAMC,WCM7B8B,mLAJX,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,aAFO/B,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.962392a3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Input extends React.Component {\r\n  render() {\r\n    return (\r\n      <input\r\n        onKeyUp={this.props.keyUpHandler}\r\n        className=\"todo__addNew\"\r\n        type=\"text\"\r\n        placeholder={\"Что нужно сделать?\"}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class ToDoItem extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        onDoubleClick={() =>\r\n          this.props.handleDoubleClickToEdit(this.props.index)\r\n        }\r\n        className=\"todo__item\"\r\n      >\r\n        {this.props.text}\r\n        <div\r\n          onClick={() => this.props.handleClickToRemove(this.props.index)}\r\n          className=\"todo__remove\"\r\n        >\r\n          X\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Input from \"./Input\";\r\nimport ToDoItem from \"./ToDoItem\";\r\n\r\nexport default class ToDoList extends React.Component {\r\n  state = {\r\n    list: []\r\n  };\r\n  render() {\r\n    var list = this.state.list;\r\n    return (\r\n      <div className=\"ToDoList\">\r\n        <h1>Todos</h1>\r\n        <Input keyUpHandler={this.keyUpHandler} />\r\n        {list.map((item, index) => {\r\n          return (\r\n            <ToDoItem\r\n              key={index}\r\n              index={index} // для выбора записи\r\n              text={item}\r\n              handleClickToRemove={this.handleClickToRemove} // клик по крестику\r\n              handleDoubleClickToEdit={this.handleDoubleClickToEdit} // двойной клик по записи для режима редактирования\r\n              handleEditing={this.handleEditing} // обработка prompt\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  handleDoubleClickToEdit = index => {\r\n    // по двойному клику модальное окно с новым значением, либо со старым если нажали \"Отмена\"\r\n    var arr = this.state.list;\r\n    var newValue = prompt(\"Введите новое значение\", arr[index]) || arr[index];\r\n    arr[index] = newValue;\r\n    this.setState({ list: arr });\r\n  };\r\n  handleClickToRemove = index => {\r\n    // callback для удаления записи по index`у\r\n    var arr = this.state.list;\r\n    arr.splice(index, 1);\r\n    this.setState({ list: arr });\r\n  };\r\n\r\n  keyUpHandler = event => {\r\n    // добавление новый записи по нажатию \"Enter\"\r\n    if (event.keyCode === 13 && event.target.value !== \"\") {\r\n      var newToDo = event.target.value;\r\n      var arr = this.state.list;\r\n      arr.push(newToDo);\r\n      event.target.value = \"\"; // очистить value чтобы появился стандартный placeholder\r\n      this.setState({ list: arr });\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./components/ToDoList\";\n\nclass App extends Component {\n  render() {\n    return <ToDoList />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}